<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="com.common.DynamicPropertyPlaceholderConfigurer">  
        <!-- <property name="location" value="classpath:jdbc.properties" />   -->
        <property name="order" value="1" />
        <property name="ignoreUnresolvablePlaceholders" value="true" /> <!-- 忽视那些无法解析的配置 -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" /> <!-- 从jvm虚拟机的参数中获得配置信息 -->
    </bean>
    
    <!-- Database -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="maxActive" value="${db.maxActive}"></property>
    	<property name="maxWait" value="${db.maxWait}"></property>
    	<property name="timeBetweenEvictionRunsMillis" value="${db.evictionRun}"></property>
    	<property name="defaultAutoCommit" value="${db.defaultAutoCommit}"></property>
    	<property name="testOnBorrow" value="true"></property>
		<property name="testOnReturn" value="true"></property>
		<property name="testWhileIdle" value="true"></property>
		<property name="validationQuery" value="SELECT 1"></property>
		<property name="validationQueryTimeout" value="10"></property>  
	</bean>
	
	<bean id="dataSourceBK" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.bk.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="maxActive" value="${db.maxActive}"></property>
    	<property name="maxWait" value="${db.maxWait}"></property>
    	<property name="timeBetweenEvictionRunsMillis" value="${db.evictionRun}"></property>
    	<property name="defaultAutoCommit" value="${db.defaultAutoCommit}"></property>
    	<property name="testOnBorrow" value="true"></property>
		<property name="testOnReturn" value="true"></property>
		<property name="testWhileIdle" value="true"></property>
		<property name="validationQuery" value="SELECT 1"></property>
		<property name="validationQueryTimeout" value="10"></property>  
	</bean>
	
	<!-- 多数据源 -->
	<bean id="dynamicDataSource" class="com.dataSource.DynamicDataSource">
		 <property name="targetDataSources">
            <map key-type="java.lang.String">
          	    <entry key="dataSource" value-ref="dataSource"></entry>
        		<entry key="dataSourceBK" value-ref="dataSourceBK"></entry>
            </map>
        </property>
   		<!-- 默认目标数据源为你主库数据源 -->
        <property name="defaultTargetDataSource" ref="dataSource"/>
	</bean>
	
	<!-- spring和MyBatis完美整合，自动扫描mapping.xml文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dynamicDataSource" />  
        <property name="mapperLocations" value="classpath:com/dao/*.xml"></property>  
    </bean> 
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean> 
    
    <bean id="dataSourceExchange" class="com.dataSource.DataSourceExchange"/>
    
    <aop:config>
    	<aop:pointcut id="datasourcePointcut" expression="execution(* com.service.impl.*.*(..))" />
    	<aop:advisor advice-ref="dataSourceExchange" pointcut-ref="datasourcePointcut" order="1"/>
    </aop:config>
    <aop:config expose-proxy="true"></aop:config>
    <!-- <aop:aspectj-autoproxy expose-proxy="true"/> -->
   
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
        <qualifier value="transactionManager" />
    </bean>
    <bean id="transactionManagerBK" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSourceBK" />  
        <qualifier value="transactionManagerBK" />
    </bean> -->
     
    <!-- <tx:annotation-driven transaction-manager="transactionManager" />
    <tx:annotation-driven transaction-manager="transactionManagerBK" />    -->
    
</beans>